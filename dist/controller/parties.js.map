{"version":3,"sources":["../../app/controller/parties.js"],"names":["partyController","createParty","req","res","body","name","hqAddress","logoUrl","send","status","error","id","partyDb","length","push","response","data","getParties","getParty","partyId","params","i","parseInt","updateParty","deleteParty","splice","message"],"mappings":";;;;;;;AAAA;;;;AAEA,IAAMA,eAAe,GAAG;AACtBC,EAAAA,WADsB,uBACVC,GADU,EACLC,GADK,EACA;AACpB;AADoB,oBAEiBD,GAAG,CAACE,IAFrB;AAAA,QAEZC,IAFY,aAEZA,IAFY;AAAA,QAENC,SAFM,aAENA,SAFM;AAAA,QAEKC,OAFL,aAEKA,OAFL,EAGpB;;AACA,QAAI,CAACF,IAAD,IAAS,CAACC,SAAV,IAAuB,CAACC,OAA5B,EAAqC;AACnC,aAAOJ,GAAG,CAACK,IAAJ,CAAS;AAAEC,QAAAA,MAAM,EAAE,GAAV;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OAAT,CAAP;AACD,KANmB,CAOpB;;;AACA,QAAMC,EAAE,GAAGC,iBAAQC,MAAR,GAAiB,CAA5B;AACAX,IAAAA,GAAG,CAACE,IAAJ,CAASO,EAAT,GAAcA,EAAd,CAToB,CAUpB;;AACAC,qBAAQE,IAAR,CAAaZ,GAAG,CAACE,IAAjB,EAXoB,CAYpB;;;AACA,QAAMW,QAAQ,GAAG;AAAEN,MAAAA,MAAM,EAAE,GAAV;AAAeO,MAAAA,IAAI,EAAE,CAACJ,iBAAQD,EAAE,GAAG,CAAb,CAAD;AAArB,KAAjB;AACA,WAAOR,GAAG,CAACK,IAAJ,CAASO,QAAT,CAAP;AACD,GAhBqB;AAkBtBE,EAAAA,UAlBsB,sBAkBXf,GAlBW,EAkBNC,GAlBM,EAkBD;AACnB;AACA,WAAOA,GAAG,CAACK,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAE,GAAV;AAAeO,MAAAA,IAAI,EAAEJ;AAArB,KAAT,CAAP;AACD,GArBqB;AAuBtBM,EAAAA,QAvBsB,oBAuBbhB,GAvBa,EAuBRC,GAvBQ,EAuBH;AACjB;AADiB,QAETgB,OAFS,GAEGjB,GAAG,CAACkB,MAFP,CAETD,OAFS,EAGjB;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,iBAAQC,MAA5B,EAAoCQ,CAAC,IAAI,CAAzC,EAA4C;AAC1C;AACA;AACA,UAAIT,iBAAQS,CAAR,EAAWV,EAAX,KAAkBW,QAAQ,CAACH,OAAD,EAAU,EAAV,CAA9B,EAA6C;AAC3C;AACA,eAAOhB,GAAG,CAACK,IAAJ,CAAS;AAAEC,UAAAA,MAAM,EAAE,GAAV;AAAeO,UAAAA,IAAI,EAAE,CAACJ,iBAAQS,CAAR,CAAD;AAArB,SAAT,CAAP;AACD;AACF,KAXgB,CAYjB;;;AACA,WAAOlB,GAAG,CAACK,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,KAAK,0BAAmBS,OAAnB;AAApB,KAAT,CAAP;AACD,GArCqB;AAsCtBI,EAAAA,WAtCsB,uBAsCVrB,GAtCU,EAsCLC,GAtCK,EAsCA;AACpB;AADoB,QAEZgB,OAFY,GAEAjB,GAAG,CAACkB,MAFJ,CAEZD,OAFY,EAGpB;;AAHoB,qBAIiBjB,GAAG,CAACE,IAJrB;AAAA,QAIZC,IAJY,cAIZA,IAJY;AAAA,QAINC,SAJM,cAINA,SAJM;AAAA,QAIKC,OAJL,cAIKA,OAJL,EAKpB;;AACA,QAAI,CAACF,IAAD,IAAS,CAACC,SAAV,IAAuB,CAACC,OAA5B,EAAqC;AACnC,aAAOJ,GAAG,CAACK,IAAJ,CAAS;AAAEC,QAAAA,MAAM,EAAE,GAAV;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OAAT,CAAP;AACD,KARmB,CASpB;AACA;;;AACA,SAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,iBAAQC,MAA5B,EAAoCQ,CAAC,IAAI,CAAzC,EAA4C;AAC1C,UAAIT,iBAAQS,CAAR,EAAWV,EAAX,KAAkBW,QAAQ,CAACH,OAAD,EAAU,EAAV,CAA9B,EAA6C;AAC3C;AACAP,yBAAQS,CAAR,EAAWhB,IAAX,GAAkBA,IAAlB;AACAO,yBAAQS,CAAR,EAAWf,SAAX,GAAuBA,SAAvB;AACAM,yBAAQS,CAAR,EAAWd,OAAX,GAAqBA,OAArB,CAJ2C,CAK3C;;AACA,eAAOJ,GAAG,CAACK,IAAJ,CAAS;AAAEC,UAAAA,MAAM,EAAE,GAAV;AAAeO,UAAAA,IAAI,EAAE,CAACJ,iBAAQS,CAAR,CAAD;AAArB,SAAT,CAAP;AACD;AACF,KApBmB,CAqBpB;;;AACA,WAAOlB,GAAG,CAACK,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,KAAK,6BAAsBS,OAAtB;AAApB,KAAT,CAAP;AACD,GA7DqB;AA8DtBK,EAAAA,WA9DsB,uBA8DVtB,GA9DU,EA8DLC,GA9DK,EA8DA;AACpB;AADoB,QAEZgB,OAFY,GAEAjB,GAAG,CAACkB,MAFJ,CAEZD,OAFY,EAGpB;AACA;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,iBAAQC,MAA5B,EAAoCQ,CAAC,IAAI,CAAzC,EAA4C;AAC1C,UAAIT,iBAAQS,CAAR,EAAWV,EAAX,KAAkBW,QAAQ,CAACH,OAAD,EAAU,EAAV,CAA9B,EAA6C;AAC3C;AACAP,yBAAQa,MAAR,CAAeb,iBAAQS,CAAR,EAAWV,EAAX,GAAgB,CAA/B,EAAkC,CAAlC;;AACA,eAAOR,GAAG,CAACK,IAAJ,CAAS;AAAEC,UAAAA,MAAM,EAAE,GAAV;AAAeO,UAAAA,IAAI,EAAE,CAAC;AAAEU,YAAAA,OAAO,EAAE;AAAX,WAAD;AAArB,SAAT,CAAP;AACD;AACF,KAXmB,CAYpB;;;AACA,WAAOvB,GAAG,CAACK,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,KAAK,6BAAsBS,OAAtB;AAApB,KAAT,CAAP;AACD;AA5EqB,CAAxB;eA+EenB,e","sourcesContent":["import partyDb from '../db/parties';\r\n\r\nconst partyController = {\r\n  createParty(req, res) {\r\n    // use object destructuring to get values contained in body\r\n    const { name, hqAddress, logoUrl } = req.body;\r\n    // Validation: check if any of the required fields is empty of not provided\r\n    if (!name || !hqAddress || !logoUrl) {\r\n      return res.send({ status: 400, error: 'Kindly enter all fields' });\r\n    }\r\n    // generate id\r\n    const id = partyDb.length + 1;\r\n    req.body.id = id;\r\n    // insert record into db\r\n    partyDb.push(req.body);\r\n    // now format response to be sent\r\n    const response = { status: 201, data: [partyDb[id - 1]] };\r\n    return res.send(response);\r\n  },\r\n\r\n  getParties(req, res) {\r\n    // send all the parties inside the partyDb object as response\r\n    return res.send({ status: 200, data: partyDb });\r\n  },\r\n\r\n  getParty(req, res) {\r\n    // get the partyId from the url sent via GET\r\n    const { partyId } = req.params;\r\n    // loop through all the parties inside the partyDb\r\n    for (let i = 0; i < partyDb.length; i += 1) {\r\n      // get the party with id that equals the partyId sent via url\r\n      // use parseInt to convert string of number to a real number in base 10\r\n      if (partyDb[i].id === parseInt(partyId, 10)) {\r\n        // return that party\r\n        return res.send({ status: 200, data: [partyDb[i]] });\r\n      }\r\n    }\r\n    // if partyId sent doesnt match party id, send a party not found error\r\n    return res.send({ status: 404, error: `Party with id ${partyId} not found` });\r\n  },\r\n  updateParty(req, res) {\r\n    // get partyId from url sent via GET e.g politico.com/api/v1/parties/10\r\n    const { partyId } = req.params;\r\n    // get values of all the input field sent via POST\r\n    const { name, hqAddress, logoUrl } = req.body;\r\n    // return validation error if any of the expected fields are missing\r\n    if (!name || !hqAddress || !logoUrl) {\r\n      return res.send({ status: 400, error: 'All fields are required' });\r\n    }\r\n    // loop through the party db and get the record\r\n    // that has the same id as the one supplied in the url\r\n    for (let i = 0; i < partyDb.length; i += 1) {\r\n      if (partyDb[i].id === parseInt(partyId, 10)) {\r\n        // if found, update its properties with the new ones entered on the form\r\n        partyDb[i].name = name;\r\n        partyDb[i].hqAddress = hqAddress;\r\n        partyDb[i].logoUrl = logoUrl;\r\n        // return Success response\r\n        return res.send({ status: 200, data: [partyDb[i]] });\r\n      }\r\n    }\r\n    // if not found, return not found error\r\n    return res.send({ status: 404, error: `Party with id of ${partyId} not found` });\r\n  },\r\n  deleteParty(req, res) {\r\n    // get partyId from url sent via GET e.g politico.com/api/v1/parties/10\r\n    const { partyId } = req.params;\r\n    // loop through the party db and get the record\r\n    // that has the same id as the one supplied in the url\r\n    for (let i = 0; i < partyDb.length; i += 1) {\r\n      if (partyDb[i].id === parseInt(partyId, 10)) {\r\n        // if found, remove the record from the db and return Success response\r\n        partyDb.splice(partyDb[i].id - 1, 1);\r\n        return res.send({ status: 204, data: [{ message: 'Party deleted succesfully' }] });\r\n      }\r\n    }\r\n    // if not found, return a not found error\r\n    return res.send({ status: 404, error: `Party with id of ${partyId} not found` });\r\n  },\r\n};\r\n\r\nexport default partyController;\r\n"],"file":"parties.js"}