{"version":3,"sources":["../../app/controller/parties.js"],"names":["partyController","createParty","req","res","body","name","hqAddress","logoUrl","send","status","error","text","values","db","query","then","party","data","rows","catch","err","getParties","getParty","partyId","params","i","partyDb","length","id","parseInt","updateParty","deleteParty","splice","message"],"mappings":"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","sourcesContent":["import partyDb from '../db/parties';\r\nimport db from '../models/db'\r\n\r\nconst partyController = {\r\n  createParty(req, res) {\r\n    // use object destructuring to get values contained in body\r\n    const { name, hqAddress, logoUrl } = req.body;\r\n    // Validation: check if any of the required fields is empty of not provided\r\n    if (!name || !hqAddress || !logoUrl) {\r\n      return res.send({ status: 400, error: 'Kindly enter all fields' });\r\n    }\r\n   \r\n    const text = 'INSERT INTO party (name, hqAddress, logourl) VALUES ($1, $2, $3) RETURNING * '\r\n    const values = [name, hqAddress, logoUrl]\r\n\r\n    db.query(text, values).then((party) =>{\r\n      return res.status(201).send({\r\n        data:[party.rows[0]]\r\n      })\r\n    }).catch((err) =>{\r\n      return res.send(err)      \r\n    }) \r\n  },\r\n\r\n  getParties(req, res) {\r\n    const text = 'SELECT * FROM party'\r\n    db.query(text).then((party)=>{\r\n      return res.send({ status: 200, data: party.rows[0] });\r\n    })\r\n  },\r\n\r\n  getParty(req, res) {\r\n    // get the partyId from the url sent via GET\r\n    const { partyId } = req.params;\r\n    // loop through all the parties inside the partyDb\r\n    for (let i = 0; i < partyDb.length; i += 1) {\r\n      // get the party with id that equals the partyId sent via url\r\n      // use parseInt to convert string of number to a real number in base 10\r\n      if (partyDb[i].id === parseInt(partyId, 10)) {\r\n        // return that party\r\n        return res.send({ status: 200, data: [partyDb[i]] });\r\n      }\r\n    }\r\n    // if partyId sent doesnt match party id, send a party not found error\r\n    return res.send({ status: 404, error: `Party with id ${partyId} not found` });\r\n  },\r\n  updateParty(req, res) {\r\n    // get partyId from url sent via GET e.g politico.com/api/v1/parties/10\r\n    const { partyId } = req.params;\r\n    // get values of all the input field sent via POST\r\n    const { name, hqAddress, logoUrl } = req.body;\r\n    // return validation error if any of the expected fields are missing\r\n    if (!name || !hqAddress || !logoUrl) {\r\n      return res.send({ status: 400, error: 'All fields are required' });\r\n    }\r\n    // loop through the party db and get the record\r\n    // that has the same id as the one supplied in the url\r\n    for (let i = 0; i < partyDb.length; i += 1) {\r\n      if (partyDb[i].id === parseInt(partyId, 10)) {\r\n        // if found, update its properties with the new ones entered on the form\r\n        partyDb[i].name = name;\r\n        partyDb[i].hqAddress = hqAddress;\r\n        partyDb[i].logoUrl = logoUrl;\r\n        // return Success response\r\n        return res.send({ status: 200, data: [partyDb[i]] });\r\n      }\r\n    }\r\n    // if not found, return not found error\r\n    return res.send({ status: 404, error: `Party with id of ${partyId} not found` });\r\n  },\r\n  deleteParty(req, res) {\r\n    // get partyId from url sent via GET e.g politico.com/api/v1/parties/10\r\n    const { partyId } = req.params;\r\n    // loop through the party db and get the record\r\n    // that has the same id as the one supplied in the url\r\n    for (let i = 0; i < partyDb.length; i += 1) {\r\n      if (partyDb[i].id === parseInt(partyId, 10)) {\r\n        // if found, remove the record from the db and return Success response\r\n        partyDb.splice(partyDb[i].id - 1, 1);\r\n        return res.send({ status: 204, data: [{ message: 'Party deleted succesfully' }] });\r\n      }\r\n    }\r\n    // if not found, return a not found error\r\n    return res.send({ status: 404, error: `Party with id of ${partyId} not found` });\r\n  },\r\n};\r\n\r\nexport default partyController;\r\n"],"file":"parties.js"}